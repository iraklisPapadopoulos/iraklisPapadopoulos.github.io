# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 2000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 2000, replace = TRUE)
}
# Print the first few rows of the dataset
head(data)
mvnorm.etest(data, R=100)
library(corrplot)
library(corpcor)  # for partial correlation
library(qgraph) # for visualization
library(bootnet) # to estimate stability
library("openxlsx") # To write excel files
library(gridExtra)  #to use grid.arrange
library(QuantPsyc)
library(energy)
mvnorm.etest(data, R=100)
?mvnorm.etest
hist(data$Ageusia)
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
plot(sparse)
plot(complete)
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
complete
library(corrplot)
library(corpcor)  # for partial correlation
library(qgraph) # for visualization
library(bootnet) # to estimate stability
library("openxlsx") # To write excel files
library(gridExtra)  #to use grid.arrange
library(QuantPsyc)
library(energy)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 2000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom using runif function
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- round(runif(2000, min = 0, max = 10))
}
# Print the first few rows of the dataset
head(data)
###
mvnorm.etest(data, R=100)
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
library(corrplot)
library(corpcor)  # for partial correlation
library(qgraph) # for visualization
library(bootnet) # to estimate stability
library("openxlsx") # To write excel files
library(gridExtra)  #to use grid.arrange
library(QuantPsyc)
library(energy)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 2000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 8000, replace = TRUE)
}
library(corrplot)
library(corpcor)  # for partial correlation
library(qgraph) # for visualization
library(bootnet) # to estimate stability
library("openxlsx") # To write excel files
library(gridExtra)  #to use grid.arrange
library(QuantPsyc)
library(energy)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 2000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 8000, replace = TRUE)
}
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 2000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 2000, replace = TRUE)
}
# Print the first few rows of the dataset
head(data)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 8000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 8000, replace = TRUE)
}
# Print the first few rows of the dataset
head(data)
###
mvnorm.etest(data, R=100)
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
complete
plot(complete)
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
testRes = cor.mtest(data, conf.level = 0.95)
my.col <- colorRampPalette(c("white", "lightblue1", "#00B0F6"))  # your colors
par(xpd=TRUE) # to allow to write outside margins
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
# Add blue color if pvalue < 0.0001
ind <- p1$p.value<0.0001
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="#00B0F6", fg="white",
add = TRUE, inches=FALSE)
par(xpd=TRUE) # to allow to write outside margins
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
# Add blue color if pvalue < 0.0001
ind <- p1$p.value<0.0001
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="#00B0F6", fg="white",
add = TRUE, inches=FALSE)
# Add blue color if pvalue still < 0.05
ind <- p1$p.value >= 0.0001 &  p1$p.value < 0.05
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="lightblue1", fg="white",
add = TRUE, inches=FALSE)
text(p1$x, p1$y, format(round(p1$corr, 2), nsmall = 2),cex = 0.5) #round(p1$corr, 2))
colorlegend(c("white", "lightblue1", "#00B0F6"), labels = c("Non significant","Significant (p<0.05)","Highly significant (p<0.0001)"),
xlim = c(9, 9.5), ylim=c(17,19), align='l',ratio.colbar = 0.8, cex=0.5)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Dysesthesia", "Appetite Loss", "Memory Loss", "Confusional Syndrome",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough", "Pharyngeal pain", "Exertional Dyspnea", "Dyspnea Rest", "Chest Pain")
# Create a correlation matrix
cor_matrix <- matrix(c(
1.00, 0.70, 0.50, 0.40, 0.30, 0.20, 0.10, 0.05, 0.00, 0.20,
0.70, 1.00, 0.40, 0.30, 0.20, 0.10, 0.05, 0.00, 0.00, 0.10,
0.50, 0.40, 1.00, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20, 0.30,
0.40, 0.30, 0.70, 1.00, 0.80, 0.70, 0.60, 0.50, 0.40, 0.20,
0.30, 0.20, 0.60, 0.80, 1.00, 0.90, 0.80, 0.70, 0.60, 0.10,
0.20, 0.10, 0.50, 0.70, 0.90, 1.00, 0.90, 0.80, 0.70, 0.00,
0.10, 0.05, 0.40, 0.60, 0.80, 0.90, 1.00, 0.90, 0.80, 0.00,
0.05, 0.00, 0.30, 0.50, 0.70, 0.80, 0.90, 1.00, 0.90, 0.00,
0.00, 0.00, 0.20, 0.40, 0.60, 0.70, 0.80, 0.90, 1.00, 0.00,
0.20, 0.10, 0.30, 0.20, 0.10, 0.00, 0.00, 0.00, 0.00, 1.00
), nrow = length(symptoms), ncol = length(symptoms), byrow = TRUE)
# Set the diagonal of the correlation matrix to 1
diag(cor_matrix) <- 1
# Generate random data based on the correlation matrix
library(MASS)
data <- mvrnorm(n = 2000, mu = rep(0, length(symptoms)), Sigma = cor_matrix)
data <- mvrnorm(n = 2000, mu = rep(0, length(symptoms)), Sigma = cor_matrix)
# Load necessary libraries
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Number of records
n <- 2000
# Generate random data for symptoms
symptoms <- matrix(rnorm(n * 10, mean = 5, sd = 2), ncol = 10)
# Add correlation between symptoms
correlation_matrix <- matrix(c(1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.8,
1, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.6,
0.7, 1, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0, 0.5,
0.6, 0.8, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0, 0.4,
0.5, 0.7, 0.9, 1, 0.9, 0.8, 0.7, 0.6, 0, 0.3,
0.4, 0.6, 0.8, 0.9, 1, 0.9, 0.8, 0.7, 0, 0.2,
0.3, 0.5, 0.7, 0.8, 0.9, 1, 0.9, 0.8, 0, 0.1,
0.2, 0.4, 0.6, 0.7, 0.8, 0.9, 1, 0.9, 0, 0,
0.1, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 0.1, 0,
0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), nrow = 10)
# Generate correlated data
correlated_symptoms <- mvrnorm(n, mu = rep(5, 10), Sigma = correlation_matrix)
# Truncate values to ensure they are within range (0-10)
correlated_symptoms[correlated_symptoms < 0] <- 0
correlated_symptoms[correlated_symptoms > 10] <- 10
# Create dataframe with symptoms
data <- as.data.frame(correlated_symptoms)
names(data) <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Dysesthesia", "Appetite_Loss", "Memory_Loss", "Confusional_Syndrome",
"Headaches")
# Add other symptoms
data$Fever <- rnorm(n, mean = 5, sd = 2)
data$Myalgia <- rnorm(n, mean = 5, sd = 2)
data$Fatigue <- rnorm(n, mean = 5, sd = 2)
data$Rhinorrhea <- rnorm(n, mean = 5, sd = 2)
data$Fatty_cough <- rnorm(n, mean = 5, sd = 2)
data$Dry_cough <- rnorm(n, mean = 5, sd = 2)
data$Pharyngeal_pain <- rnorm(n, mean = 5, sd = 2)
data$Exertional_Dyspnea <- rnorm(n, mean = 5, sd = 2)
data$Dyspnea_Rest <- rnorm(n, mean = 5, sd = 2)
data$Chest_Pain <- rnorm(n, mean = 5, sd = 2)
# Truncate values to ensure they are within range (0-10)
data[data < 0] <- 0
data[data > 10] <- 10
# Round values
data <- round(data, 2)
View(data)
# Round values
data <- round(data, 0)
View(data)
# Load necessary libraries
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Number of records
n <- 2000
# Generate random data for symptoms
symptoms <- matrix(rnorm(n * 10, mean = 5, sd = 2), ncol = 10)
# Add correlation between symptoms
correlation_matrix <- matrix(c(1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.8,
1, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.6,
0.7, 1, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0, 0.5,
0.6, 0.8, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0, 0.4,
0.5, 0.7, 0.9, 1, 0.9, 0.8, 0.7, 0.6, 0, 0.3,
0.4, 0.6, 0.8, 0.9, 1, 0.9, 0.8, 0.7, 0, 0.2,
0.3, 0.5, 0.7, 0.8, 0.9, 1, 0.9, 0.8, 0, 0.1,
0.2, 0.4, 0.6, 0.7, 0.8, 0.9, 1, 0.9, 0, 0,
0.1, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 0.1, 0,
0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), nrow = 10)
# Generate correlated data
correlated_symptoms <- mvrnorm(n, mu = rep(5, 10), Sigma = correlation_matrix)
# Truncate values to ensure they are within range (0-10)
correlated_symptoms[correlated_symptoms < 0] <- 0
correlated_symptoms[correlated_symptoms > 10] <- 10
# Create dataframe with symptoms
data <- as.data.frame(correlated_symptoms)
names(data) <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Dysesthesia", "Appetite_Loss", "Memory_Loss", "Confusional_Syndrome",
"Headaches")
# Add other symptoms
data$Fever <- rnorm(n, mean = 5, sd = 2)
data$Myalgia <- rnorm(n, mean = 5, sd = 2)
data$Fatigue <- rnorm(n, mean = 5, sd = 2)
data$Rhinorrhea <- rnorm(n, mean = 5, sd = 2)
data$Fatty_cough <- rnorm(n, mean = 5, sd = 2)
data$Dry_cough <- rnorm(n, mean = 5, sd = 2)
data$Pharyngeal_pain <- rnorm(n, mean = 5, sd = 2)
data$Exertional_Dyspnea <- rnorm(n, mean = 5, sd = 2)
data$Dyspnea_Rest <- rnorm(n, mean = 5, sd = 2)
data$Chest_Pain <- rnorm(n, mean = 5, sd = 2)
# Truncate values to ensure they are within range (0-10)
data[data < 0] <- 0
data[data > 10] <- 10
# Round values
data <- round(data, 0)
testRes = cor.mtest(data, conf.level = 0.95)
my.col <- colorRampPalette(c("white", "lightblue1", "#00B0F6"))  # your colors
par(xpd=TRUE) # to allow to write outside margins
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
# Add blue color if pvalue < 0.0001
ind <- p1$p.value<0.0001
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="#00B0F6", fg="white",
add = TRUE, inches=FALSE)
# Add blue color if pvalue still < 0.05
ind <- p1$p.value >= 0.0001 &  p1$p.value < 0.05
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="lightblue1", fg="white",
add = TRUE, inches=FALSE)
text(p1$x, p1$y, format(round(p1$corr, 2), nsmall = 2),cex = 0.5) #round(p1$corr, 2))
colorlegend(c("white", "lightblue1", "#00B0F6"), labels = c("Non significant","Significant (p<0.05)","Highly significant (p<0.0001)"),
xlim = c(9, 9.5), ylim=c(17,19), align='l',ratio.colbar = 0.8, cex=0.5)
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
sparse <- estimateNetwork(data, default = "EBICglasso", corMethod="spearman")
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
?estimateNetwork
str(data)
library(corrplot)
library(corpcor)  # for partial correlation
library(qgraph) # for visualization
library(bootnet) # to estimate stability
library("openxlsx") # To write excel files
library(gridExtra)  #to use grid.arrange
library(QuantPsyc)
library(energy)
# Create a vector of symptoms
symptoms <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Headaches", "Fever", "Myalgia", "Fatigue", "Rhinorrhea", "Fatty cough",
"Dry cough")
# Create a data frame to store the data
data <- data.frame(matrix(nrow = 8000, ncol = length(symptoms)))
colnames(data) <- symptoms
# Generate random values for each symptom
set.seed(123) # Setting seed for reproducibility
for (i in 1:length(symptoms)) {
data[, i] <- sample(0:10, 8000, replace = TRUE)
}
# Print the first few rows of the dataset
head(data)
###
mvnorm.etest(data, R=100)
plot(complete1, labels=names, layout="spring", groups=group, legend=F)# , fade=F )
testRes = cor.mtest(data, conf.level = 0.95)
my.col <- colorRampPalette(c("white", "lightblue1", "#00B0F6"))  # your colors
par(xpd=TRUE) # to allow to write outside margins
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
# Add blue color if pvalue < 0.0001
ind <- p1$p.value<0.0001
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="#00B0F6", fg="white",
add = TRUE, inches=FALSE)
# Add blue color if pvalue still < 0.05
ind <- p1$p.value >= 0.0001 &  p1$p.value < 0.05
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="lightblue1", fg="white",
add = TRUE, inches=FALSE)
text(p1$x, p1$y, format(round(p1$corr, 2), nsmall = 2),cex = 0.5) #round(p1$corr, 2))
colorlegend(c("white", "lightblue1", "#00B0F6"), labels = c("Non significant","Significant (p<0.05)","Highly significant (p<0.0001)"),
xlim = c(9, 9.5), ylim=c(17,19), align='l',ratio.colbar = 0.8, cex=0.5)
# Load necessary libraries
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Number of records
n <- 2000
# Generate random data for symptoms
symptoms <- matrix(rnorm(n * 10, mean = 5, sd = 2), ncol = 10)
# Add correlation between symptoms
correlation_matrix <- matrix(c(1, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.8,
1, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0, 0.6,
0.7, 1, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0, 0.5,
0.6, 0.8, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0, 0.4,
0.5, 0.7, 0.9, 1, 0.9, 0.8, 0.7, 0.6, 0, 0.3,
0.4, 0.6, 0.8, 0.9, 1, 0.9, 0.8, 0.7, 0, 0.2,
0.3, 0.5, 0.7, 0.8, 0.9, 1, 0.9, 0.8, 0, 0.1,
0.2, 0.4, 0.6, 0.7, 0.8, 0.9, 1, 0.9, 0, 0,
0.1, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 0.1, 0,
0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), nrow = 10)
# Generate correlated data
correlated_symptoms <- mvrnorm(n, mu = rep(5, 10), Sigma = correlation_matrix)
# Truncate values to ensure they are within range (0-10)
correlated_symptoms[correlated_symptoms < 0] <- 0
correlated_symptoms[correlated_symptoms > 10] <- 10
# Create dataframe with symptoms
data <- as.data.frame(correlated_symptoms)
names(data) <- c("Ageusia", "Anosmia", "Vomiting", "Nausea", "Diarrhea",
"Dysesthesia", "Appetite_Loss", "Memory_Loss", "Confusional_Syndrome",
"Headaches")
# Add other symptoms
data$Fever <- rnorm(n, mean = 5, sd = 2)
data$Myalgia <- rnorm(n, mean = 5, sd = 2)
data$Fatigue <- rnorm(n, mean = 5, sd = 2)
data$Rhinorrhea <- rnorm(n, mean = 5, sd = 2)
data$Fatty_cough <- rnorm(n, mean = 5, sd = 2)
data$Dry_cough <- rnorm(n, mean = 5, sd = 2)
data$Pharyngeal_pain <- rnorm(n, mean = 5, sd = 2)
data$Exertional_Dyspnea <- rnorm(n, mean = 5, sd = 2)
data$Dyspnea_Rest <- rnorm(n, mean = 5, sd = 2)
data$Chest_Pain <- rnorm(n, mean = 5, sd = 2)
# Truncate values to ensure they are within range (0-10)
data[data < 0] <- 0
data[data > 10] <- 10
# Round values
data <- round(data, 0)
par(xpd=TRUE) # to allow to write outside margins
corrplot(cor(data,method = c("spearman")), method="color", type='lower',tl.cex=0.5, diag=FALSE, #addCoef.col = "black",
tl.col = 'black',tl.srt = 90,
p.mat=testRes$p, sig.level=1,
col="white", addgrid.col="white", cl.pos='n')$corrPos -> p1
# Add blue color if pvalue < 0.0001
ind <- p1$p.value<0.0001
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="#00B0F6", fg="white",
add = TRUE, inches=FALSE)
# Add blue color if pvalue still < 0.05
ind <- p1$p.value >= 0.0001 &  p1$p.value < 0.05
symbols(x=p1[ind,]$x, y=p1[ind,]$y, squares = rep(1,sum(ind)), bg="lightblue1", fg="white",
add = TRUE, inches=FALSE)
text(p1$x, p1$y, format(round(p1$corr, 2), nsmall = 2),cex = 0.5) #round(p1$corr, 2))
colorlegend(c("white", "lightblue1", "#00B0F6"), labels = c("Non significant","Significant (p<0.05)","Highly significant (p<0.0001)"),
xlim = c(9, 9.5), ylim=c(17,19), align='l',ratio.colbar = 0.8, cex=0.5)
complete <- estimateNetwork(data, default = "pcor", corMethod="spearman")
# Load required libraries
library(qgraph)
library(bootnet)
# Generate random data for a social network
set.seed(123)
num_people <- 20
num_edges <- 50
# Create a data frame to store the network data
network_data <- data.frame(
from = sample(1:num_people, num_edges, replace = TRUE),
to = sample(1:num_people, num_edges, replace = TRUE)
)
# Print the first few rows of the network data
head(network_data)
# Visualize the network
# Create an empty adjacency matrix
adj_matrix <- matrix(0, nrow = num_people, ncol = num_people)
# Fill in the adjacency matrix based on the network data
for (i in 1:num_edges) {
from <- network_data$from[i]
to <- network_data$to[i]
adj_matrix[from, to] <- 1
}
# Plot the network
qgraph::qgraph(adj_matrix, layout = "spring", directed = FALSE,
labels = paste("Person", 1:num_people),
label.scale = FALSE, vsize = 10, esize = 0.5)
# Load required libraries
library(qgraph)
library(bootnet)
# Define COVID-19 symptoms
symptoms <- c("Fever", "Cough", "Shortness of breath", "Fatigue", "Muscle or body aches",
"Headache", "Sore throat", "Loss of taste or smell", "Congestion or runny nose",
"Nausea or vomiting")
# Generate random data for correlation between symptoms
set.seed(123)
num_symptoms <- length(symptoms)
correlation_matrix <- matrix(runif(num_symptoms^2, min = -0.5, max = 0.5), nrow = num_symptoms)
# Set diagonal to 1
diag(correlation_matrix) <- 1
# Visualize the network
qgraph(correlation_matrix, layout = "spring", labels = symptoms, label.scale = FALSE, vsize = 10, esize = 0.5)
correlation_matrix
# Load required libraries
library(bootnet)
# Define COVID-19 symptoms
symptoms <- c("Fever", "Cough", "Shortness of breath", "Fatigue", "Muscle or body aches",
"Headache", "Sore throat", "Loss of taste or smell", "Congestion or runny nose",
"Nausea or vomiting")
# Generate random data for correlation between symptoms
set.seed(123)
num_symptoms <- length(symptoms)
correlation_matrix <- matrix(runif(num_symptoms^2, min = -0.5, max = 0.5), nrow = num_symptoms)
# Set diagonal to 1
diag(correlation_matrix) <- 1
# Estimate the network structure
network <- estimateNetwork(correlation_matrix, default = "EBICglasso")
# Plot the estimated network
plot(network, labels = symptoms)
# Load required libraries
library(bootnet)
# Define COVID-19 symptoms
symptoms <- c("Fever", "Cough", "Shortness of breath", "Fatigue", "Muscle or body aches",
"Headache", "Sore throat", "Loss of taste or smell", "Congestion or runny nose",
"Nausea or vomiting")
# Generate random data for correlation between symptoms
set.seed(123)
num_symptoms <- length(symptoms)
# Set diagonal to 1
diag(correlation_matrix) <- 1
correlation_matrix <- matrix(runif(num_symptoms^2, min = -0.5, max = 0.5), nrow = num_symptoms)
correlation_matrix
# Set diagonal to 1
diag(correlation_matrix) <- 1
# Estimate the network structure
network <- estimateNetwork(correlation_matrix, default = "EBICglasso")
# Estimate the network structure
network <- estimateNetwork(correlation_matrix, default = "pcor")
# Plot the estimated network
plot(network, labels = symptoms)
centralityPlot(
list(Complete = network),
include = c("Strength", "Closeness", "Betweenness"),orderBy = "Strength")
png("network.png", width=700, height=600)
plot(network, labels = symptoms)
dev.off()
dir
png("network.png", width=700, height=600,res=500)
plot(network, labels = symptoms)
dev.off()
png("network.png",units="cm", width=12, height=12,res=500)
plot(network, labels = symptoms)
dev.off()
png("centrality.png",units="cm", width=12, height=12,res=500)
centralityPlot(
list(Complete = network),
include = c("Strength", "Closeness", "Betweenness"),orderBy = "Strength")
dev.off()
set.seed(4578)  # fix a seed to get exactly the same result
boot2 <- bootnet(network, 1000, default = "pcor", type = "nonparametric")
boot2 <- bootnet(network_data, 1000, default = "pcor", type = "nonparametric")
plot(boot2, statistics = "strength", CIstyle = "SE", plot="area", order = "sample")
